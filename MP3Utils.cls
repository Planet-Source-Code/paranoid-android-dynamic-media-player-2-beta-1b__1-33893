VERSION 1.0 CLASS
BEGIN
  MultiUse = -1  'True
  Persistable = 0  'NotPersistable
  DataBindingBehavior = 0  'vbNone
  DataSourceBehavior  = 0  'vbNone
  MTSTransactionMode  = 0  'NotAnMTSObject
END
Attribute VB_Name = "MP3Util"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = True
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Option Explicit

' (c) 2002 Mark Biddlecom

' This class is used to provide some basic utilities for MP3 files.  Namely,
' it works with the ID-3 tag stored at the end of an MP3 file.

' Author:           Mark Biddlecom
' Created:          3.15.2002
' Completed:        3.15.2002
' Modification Log: N/A

' Dependencies:
'   <None>

' Notes:
'   This file is designed to work only with MP3 files containing an ID3 version
'   1 tag, and will not recognize version 2 tags.  The good news is that if an
'   MP3 contains both tag versions, which many do, this class will still be
'   able to read the tag.

' =============================================================================
' U S I N G   T H I S   C L A S S
' =============================================================================

' This class follows the read, change, update/discard data model.  That is,
' you read tag data from an MP3, modify it in whatever way you see fit, then
' save it back to the file when you're ready (or discard the object without
' saving and thus discarding all changes).  Reading data form the file
' overwrites the "snapshot" values stored in the class object, and thus any
' changes you make without writing back to the file will be lost.  One could
' call this a relatively cheap mechanism for undo capabilites :P.
'
' All file I/O is done with the readTag and writeTag methods.  You can lock a
' file by setting the readonly property to True--but note that once you change
' this property you cannot change it back without resetting the filename
' property or, of course, creating an new instance of the class.
'
' A filename must be specified (via the filename property) in order to interact
' with an MP3 file, but you are not required to specify a filename if you
' simply want to set and read the object properties without saving them.

' =============================================================================
' C L A S S   S T R U C T U R E
' =============================================================================

' ENUMERATIONS
' -----------------------------------------------------------------------------

' MP3U_ERRORS                           Defines the error codes generated by
'                                       this class.
'   MP3U_E_READONLY                         You attempted to modify the
'                                               properties or contents of a
'                                               read-only file.
'   MP3U_E_INVALIDARG                       You specified an illegal or invalid
'                                               argument.
'   MP3U_E_INVALIDCHARACTER                 You specified a character that
'                                               cannot appear in a Windows
'                                               filename.
'   MP3U_E_NOFILE                           You attempted to perform a file
'                                               operation without specifying a
'                                               file.
'   MP3U_E_FILEDOESNOTEXIST                 You specified a nonexistent file.
'   MP3U_E_INVALIDFILE                      You specified an invalid or corrupt
'                                               MP3 file.

' MP3U_GENRES                           Defines the genres that you can store
'                                       in the ID-3 tag.
'   MP3U_G_BLUES                            "Blues"
'   MP3U_G_CLASSICROCK                      "Classic Rock"
'   MP3U_G_COUNTRY                          "Country"
'   MP3U_G_DANCE                            "Dance"
'   MP3U_G_DISCO                            "Disco"
'   MP3U_G_FUNK                             "Funk"
'   MP3U_G_GRUNGE                           "Grunge"
'   MP3U_G_HIPHOP                           "Hip Hop"
'   MP3U_G_JAZZ                             "Jazz"
'   MP3U_G_METAL                            "Metal"
'   MP3U_G_NEWAGE                           "New Age"
'   MP3U_G_OLDIES                           "Oldies"
'   MP3U_G_OTHER                            "Other"
'   MP3U_G_POP                              "Pop"
'   MP3U_G_RANDB                            "R&B"
'   MP3U_G_RAP                              "Rap"
'   MP3U_G_REGGAE                           "Reggae"
'   MP3U_G_ROCK                             "Rock"
'   MP3U_G_TECHNO                           "Techno"
'   MP3U_G_INDUSTRIAL                       "Industrial"
'   MP3U_G_ALTERNATIVE                      "Alternative"
'   MP3U_G_SKA                              "Ska"
'   MP3U_G_DEATHMETAL                       "Death Metal"
'   MP3U_G_PRANKS                           "Pranks"
'   MP3U_G_SOUNDTRACK                       "Soundtrack"
'   MP3U_G_EUROTECHNO                       "Euro-Techno"
'   MP3U_G_AMBIENT                          "Ambient"
'   MP3U_G_TRIPHOP                          "Trip-Hop"
'   MP3U_G_VOCAL                            "Vocal"
'   MP3U_G_JAZZFUNK                         "Jazz+Funk"
'   MP3U_G_FUSION                           "Fusion"
'   MP3U_G_TRANCE                           "Trance"
'   MP3U_G_CLASSICAL                        "Classical"
'   MP3U_G_INSTRUMENTAL                     "Instrumental"
'   MP3U_G_ACID                             "Acid"
'   MP3U_G_HOUSE                            "House"
'   MP3U_G_GAME                             "Game"
'   MP3U_G_SOUNDCLIP                        "Sound Clip"
'   MP3U_G_GOSPEL                           "Gospel"
'   MP3U_G_NOISE                            "Noise"
'   MP3U_G_ALTERNROCK                       "AlternRock"
'   MP3U_G_BASS                             "Bass"
'   MP3U_G_SOUL                             "Soul"
'   MP3U_G_PUNK                             "Punk"
'   MP3U_G_SPACE                            "Space"
'   MP3U_G_MEDITATIVE                       "Meditative"
'   MP3U_G_INSTRUMENTALPOP                  "Instrumental Pop"
'   MP3U_G_INSTRUMENTALROCK                 "Instrumental Rock"
'   MP3U_G_ETHNIC                           "Ethnic"
'   MP3U_G_GOTHIC                           "Gothic"
'   MP3U_G_DARKWAVE                         "Dark wave"
'   MP3U_G_TECHNOINDUSTRIAL                 "Techno-Insustrial"
'   MP3U_G_ELECTRONIC                       "Electronic"
'   MP3U_G_POPFOLK                          "Pop-Folk"
'   MP3U_G_EURODANCE                        "Eurodance"
'   MP3U_G_DREAM                            "Dream"
'   MP3U_G_SOUTHERNROCK                     "Southernrock"
'   MP3U_G_COMEDY                           "Comedy"
'   MP3U_G_CULT                             "Cult"
'   MP3U_G_GANGSTA                          "Gangsta"
'   MP3U_G_TOP40                            "Top40"
'   MP3U_G_CHRISTIANRAP                     "Christian Rap"
'   MP3U_G_POPFUNK                          "Pop/Funk"
'   MP3U_G_JUNGLE                           "Jungle"
'   MP3U_G_NATIVEAMERICAN                   "Native American"
'   MP3U_G_CABARET                          "Cabaret"
'   MP3U_G_NEWWAVE                          "New Wave"
'   MP3U_G_PSYCHADELIC                      "Psychadelic"
'   MP3U_G_RAVE                             "Rave"
'   MP3U_G_SHOWTUNES                        "Showtunes"
'   MP3U_G_TRAILER                          "Trailer"
'   MP3U_G_LOFI                             "Lo-Fi"
'   MP3U_G_TRIBAL                           "Tribal"
'   MP3U_G_ACIDPUNK                         "Acid Punk"
'   MP3U_G_ACIDJAZZ                         "Acid Jazz"
'   MP3U_G_POLKA                            "Polka"
'   MP3U_G_RETRO                            "Retro"
'   MP3U_G_MUSICAL                          "Musical"
'   MP3U_G_ROCKANDROLL                      "Rock & Roll"
'   MP3U_G_HARDROCK                         "Hard Rock"
'   MP3U_G_UNKNOWN                          "Unknown"
'
'   MP3U_G_VALID_MIN                        The minimum valid genre index.
'   MP3U_G_VALID_MAX                        The maximum valid genre index.

' PROPERTIES
' -----------------------------------------------------------------------------

' filename As String [Get/Let]
'   The file to read data from and write data to.  The file must exist.

' title As String [Get/Let]
'   The title of the track.  Will be extended (with Chr(0)) or truncated to be
'   30 characters long.

' artist As String [Get/Let]
'   The artist of the track.  Will be extended (Chr(0)) or truncated to be
'   30 characters long.

' album As String [Get/Let]
'   The album containing the track.  Will be extended (Chr(0)) or
'   truncated to be 30 characters long.

' year As String [Get/Let]
'   The year the track was written.  Will be extended (Chr(0)) or
'   truncated to be 30 characters long.

' comment As String [Get/Let]
'   A generic comment.  Will be extended (Chr(0)) or truncated to be 28
'   characters long.

' trackNumber As Byte [Get/Let]
'   The track number.  Note that some MP3 files with older tags do not include
'   track information and that this value may therefore be bogus.  MP3Util will
'   only write ID3v1 tags that include track information.

' genre As MP3U_GENRES [Get/Let]
'   The genre.

' readonly As Boolean [Get/Let]
'   Allows you to force the given file to be read only.  Note that once you
'   change readonly to True, it *cannot* be set back to False unless you change
'   the filename or create a new instance of the class.  This property is False
'   by default.

' METHODS
' -----------------------------------------------------------------------------

' readTag() As Boolean
'   Reads the contents of the ID-3 tag from the given file and loads the
'   properties with the values found therein.  If the tag does not exist or
'   there was a read error, the properties are not modified and readTag returns
'   False.  Otherwise, readTag returns True.

' writeTag()
'   Writes the object properties to the ID-3 tag in the file.  If the tag does
'   not exist, it will be created automatically.

' needsUpdate() As Boolean
'   Reads the contents of the ID-3 tag from the file and checks them against
'   tag properties in the MP3Util object.  If any of the fields differ, then
'   this method returns true.

' renameFile( style As String [, safestring = ""] [, physicalChange = True] )
' As String
'   Renames the file (and adjusts the filename property) to reflect the
'   contents of the ID-3 tag (given by the properties), based on the specified
'   style.  Characters that Windows prohibits to appear in filenames will
'   automatically be replaced by the safestring argument.  If safestring itself
'   contains an invalid filename character, renameFile will raise an error.
'
'   If you pass False to physicalChange, renameFile will not actually change
'   the name of the MP3 file or the filename property.
'
'   Returns the new name of the file.
'
'   The style string can contain literal characters and escape sequences for
'   tag fields.  The sequences are case-sensitive and are as follows:
'
'       Tag Field                   Escape Sequence
'       =================================================
'       Title                       *T
'       Artist                      *A
'       Album                       *a
'       Year                        *Y
'       Comment                     *C
'       Track Number                *N
'       Genre (String)              *G
'       Current Month (MM)          *M
'       Current Day (DD)            *D
'       Current Year (YYYY)         *y
'       Current Year (YY)           *S
'       Current Hour (24-Hour)      *H
'       Current Minute (mm)         *m
'       Current Second (ss)         *s

' genreDescription( genre As MP3U_GENRES ) As String
'   Returns a user-readable string description of the given genre.

' genreCode( genre As String ) As MP3U_GENRES
'   Returns the genre code corresponding to the given description (not case-
'   sensitive).  This function is the inverse of genreDescription.

' =============================================================================
' C L A S S   C O D E
' =============================================================================

' Constants
' -----------------------------------------------------------------------------

' ID-3 Tag Sentinel
Private Const MP3U_TAGSENTINEL As String = "TAG"

' Field Lengths
Private Const MP3U_LEN_ID3TAG As Byte = 128
Private Const MP3U_LEN_SENTINEL As Byte = 3
Private Const MP3U_LEN_TITLE As Byte = 30
Private Const MP3U_LEN_ARTIST As Byte = 30
Private Const MP3U_LEN_ALBUM As Byte = 30
Private Const MP3U_LEN_YEAR As Byte = 4
Private Const MP3U_LEN_COMMENT As Byte = 28

' Field Positions
Private Const MP3U_POS_SENTINEL = 1
Private Const MP3U_POS_TITLE = 4
Private Const MP3U_POS_ARTIST = 34
Private Const MP3U_POS_ALBUM = 64
Private Const MP3U_POS_YEAR = 94
Private Const MP3U_POS_COMMENT = 98
Private Const MP3U_POS_TRACK = 127
Private Const MP3U_POS_GENRE = 128

' Forbidden Filename Characters
Private Const MP3U_FORBIDDENCHARS As String = "\/:*?""<>|" & vbTab

' Enumerations
' -----------------------------------------------------------------------------

Public Enum MP3U_ERRORS
    MP3U_E_ERRBASE = 550000
    
    MP3U_E_READONLY = MP3U_E_ERRBASE
    MP3U_E_INVALIDARG
    MP3U_E_INVALIDCHARACTER
    MP3U_E_NOFILE
    MP3U_E_FILEDOESNOTEXIST
    MP3U_E_INVALIDFILE
End Enum

Public Enum MP3U_GENRES
    MP3U_G_BLUES
    MP3U_G_CLASSICROCK
    MP3U_G_COUNTRY
    MP3U_G_DANCE
    MP3U_G_DISCO
    MP3U_G_FUNK
    MP3U_G_GRUNGE
    MP3U_G_HIPHOP
    MP3U_G_JAZZ
    MP3U_G_METAL
    MP3U_G_NEWAGE
    MP3U_G_OLDIES
    MP3U_G_OTHER
    MP3U_G_POP
    MP3U_G_RANDB
    MP3U_G_RAP
    MP3U_G_REGGAE
    MP3U_G_ROCK
    MP3U_G_TECHNO
    MP3U_G_INDUSTRIAL
    MP3U_G_ALTERNATIVE
    MP3U_G_SKA
    MP3U_G_DEATHMETAL
    MP3U_G_PRANKS
    MP3U_G_SOUNDTRACK
    MP3U_G_EUROTECHNO
    MP3U_G_AMBIENT
    MP3U_G_TRIPHOP
    MP3U_G_VOCAL
    MP3U_G_JAZZFUNK
    MP3U_G_FUSION
    MP3U_G_TRANCE
    MP3U_G_CLASSICAL
    MP3U_G_INSTRUMENTAL
    MP3U_G_ACID
    MP3U_G_HOUSE
    MP3U_G_GAME
    MP3U_G_SOUNDCLIP
    MP3U_G_GOSPEL
    MP3U_G_NOISE
    MP3U_G_ALTERNROCK
    MP3U_G_BASS
    MP3U_G_SOUL
    MP3U_G_PUNK
    MP3U_G_SPACE
    MP3U_G_MEDITATIVE
    MP3U_G_INSTRUMENTALPOP
    MP3U_G_INSTRUMENTALROCK
    MP3U_G_ETHNIC
    MP3U_G_GOTHIC
    MP3U_G_DARKWAVE
    MP3U_G_TECHNOINDUSTRIAL
    MP3U_G_ELECTRONIC
    MP3U_G_POPFOLK
    MP3U_G_EURODANCE
    MP3U_G_DREAM
    MP3U_G_SOUTHERNROCK
    MP3U_G_COMEDY
    MP3U_G_CULT
    MP3U_G_GANGSTA
    MP3U_G_TOP40
    MP3U_G_CHRISTIANRAP
    MP3U_G_POPFUNK
    MP3U_G_JUNGLE
    MP3U_G_NATIVEAMERICAN
    MP3U_G_CABARET
    MP3U_G_NEWWAVE
    MP3U_G_PSYCHADELIC
    MP3U_G_RAVE
    MP3U_G_SHOWTUNES
    MP3U_G_TRAILER
    MP3U_G_LOFI
    MP3U_G_TRIBAL
    MP3U_G_ACIDPUNK
    MP3U_G_ACIDJAZZ
    MP3U_G_POLKA
    MP3U_G_RETRO
    MP3U_G_MUSICAL
    MP3U_G_ROCKANDROLL
    MP3U_G_HARDROCK
    MP3U_G_UNKNOWN
    
    MP3U_G_VALID_MIN = 0
    MP3U_G_VALID_MAX = 80
End Enum

' Types
' -----------------------------------------------------------------------------

Private Type MP3U_ID3TAG
    sentinel As String * MP3U_LEN_SENTINEL
    title As String * MP3U_LEN_TITLE
    artist As String * MP3U_LEN_ARTIST
    album As String * MP3U_LEN_ALBUM
    year As String * MP3U_LEN_YEAR
    comment As String * MP3U_LEN_COMMENT
    trackNumber As Byte
    Genre As Byte
End Type

' Globals
' -----------------------------------------------------------------------------

' These globals define the property values.
Private m_filename As String
Private m_title As String * 30
Private m_artist As String * 30
Private m_album As String * 30
Private m_year As String * 4
Private m_comment As String * 30
Private m_trackNumber As Byte
Private m_genre As Byte
Private m_readonly As Boolean

' Properties
' -----------------------------------------------------------------------------

Public Property Get filename() As String
    filename = m_filename
End Property
Public Property Let filename(newFilename As String)
    ' The file must exist.
    If Dir(newFilename) = "" Then
        ' No file.
        Err.Raise MP3U_E_FILEDOESNOTEXIST, "MP3Util::filename Let", _
                  "The file " & newFilename & " cannot be found"
    Else
        ' Should be ok.  Record the change and reset the readonly "flag."
        m_filename = newFilename
        m_readonly = False
    End If
End Property

Public Property Get title() As String
    title = stripzeros(m_title)
End Property
Public Property Let title(newTitle As String)
    ' Make sure it's not read-only.
    checkReadOnly "MP3Util::title Let"

    ' Extend or truncate as necessary.
    m_title = fixlength(RTrim(newTitle), MP3U_LEN_TITLE)
End Property

Public Property Get artist() As String
    artist = stripzeros(m_artist)
End Property
Public Property Let artist(newArtist As String)
    ' Make sure it's not read-only.
    checkReadOnly "MP3Util::artist Let"

    ' Extend or truncate as necessary.
    m_artist = fixlength(RTrim(newArtist), MP3U_LEN_ARTIST)
End Property

Public Property Get album() As String
    album = stripzeros(m_album)
End Property
Public Property Let album(newAlbum As String)
    ' Make sure it's not read-only.
    checkReadOnly "MP3Util::album Let"

    ' Extend or truncate as necessary.
    m_album = fixlength(RTrim(newAlbum), MP3U_LEN_ALBUM)
End Property

Public Property Get year() As String
    year = stripzeros(m_year)
End Property
Public Property Let year(newYear As String)
    ' Make sure it's not read-only.
    checkReadOnly "MP3Util::year Let"

    ' Extend or truncate as necessary.
    m_year = fixlength(RTrim(newYear), MP3U_LEN_YEAR)
End Property

Public Property Get comment() As String
    comment = stripzeros(m_comment)
End Property
Public Property Let comment(newComment As String)
    ' Make sure it's not read-only.
    checkReadOnly "MP3Util::comment Let"
    
    ' Extend or truncate as necessary.
    m_comment = fixlength(RTrim(newComment), MP3U_LEN_COMMENT)
End Property

Public Property Get trackNumber() As Byte
    trackNumber = m_trackNumber
End Property
Public Property Let trackNumber(newTrackNumber As Byte)
    ' Make sure it's not read-only.
    checkReadOnly "MP3Util::trackNumber Let"
    
    ' All good.
    m_trackNumber = newTrackNumber
End Property

Public Property Get Genre() As MP3U_GENRES
    Genre = m_genre
End Property
Public Property Let Genre(newGenre As MP3U_GENRES)
    ' Make sure it's not read-only.
    checkReadOnly "MP3Util::genre Let"
    
    ' Make sure it's in the valid range.
    If newGenre < MP3U_G_VALID_MIN Or newGenre > MP3U_G_VALID_MAX Then
        ' Nope.
        Err.Raise MP3U_E_INVALIDARG, "MP3Util::genre Let", _
                  "Invalid argument: newGenre = " & newGenre
    Else
        ' Yup.  Save it.
        m_genre = newGenre
    End If
End Property

Public Property Get readonly() As Boolean
    readonly = m_readonly
End Property
Public Property Let readonly(newValue As Boolean)
    ' Make sure the file isn't read only.
    checkReadOnly "MP3Util::readonly Let"
    
    ' Go ahead and set--probably lock--it.
    m_readonly = newValue
End Property

' Methods
' -----------------------------------------------------------------------------

Public Function readTag() As Boolean
    Dim tag As MP3U_ID3TAG

    ' Is there a filename?
    If filename = "" Then
        ' No.  Sob.
        Err.Raise MP3U_E_NOFILE, "MP3Util::readTag", "There is no file to " & _
                  "read from"
    End If
    
    ' OK, let's read.
    tag = readrecord(filename)
    
    ' Is it a valid ID3 tag?
    If tag.sentinel <> MP3U_TAGSENTINEL Then
        ' No.  The file does not seem to have one.
        readTag = False
    Else
        ' I guess so.  Store the values.
        m_title = tag.title
        m_artist = tag.artist
        m_album = tag.album
        m_year = tag.year
        m_comment = tag.comment
        m_trackNumber = tag.trackNumber
        m_genre = tag.Genre
        
        ' Report A-OK!
        readTag = True
    End If
End Function

Public Sub writeTag()
    Dim tag As MP3U_ID3TAG

    ' We'd better have a filename.
    If filename = "" Then
        ' Grr!
        Err.Raise MP3U_E_NOFILE, "MP3Util::writeTag", _
                  "There is no file to write to"
    End If

    ' If it's read-only we can't continue.
    checkReadOnly "MP3Util::writeTag"
    
    ' Build the tag.
    tag.sentinel = MP3U_TAGSENTINEL
    tag.title = m_title
    tag.artist = m_artist
    tag.album = m_album
    tag.year = m_year
    tag.comment = m_comment
    tag.trackNumber = m_trackNumber
    tag.Genre = m_genre
    
    ' First, let's determine whether a tag already exists.  If it does not,
    ' then add it.  Otherwise, just replace it.
    If readrecord(filename).sentinel = MP3U_TAGSENTINEL Then
        ' Exists.
        writerecord filename, tag
    Else
        ' Does not exist.
        writerecord filename, tag, True
    End If
End Sub

Public Function needsUpdate() As Boolean
    Dim oldtag As MP3U_ID3TAG, retval As Boolean
    
    ' Is there a filename?
    If filename = "" Then
        ' No.  Sob.
        Err.Raise MP3U_E_NOFILE, "MP3Util::needsUpdate", _
                  "There is no file to read from"
    End If
    
    ' Get the existing tag and check for differences.
    oldtag = readrecord(filename)
    
    ' Does the tag even exist?
    If oldtag.sentinel <> MP3U_TAGSENTINEL Then
        ' No.  So it therefore needs to be updated.
        retval = True
    Else
        ' Yeah.  Check value against value.
        If UCase(stripzeros(oldtag.title)) <> UCase(stripzeros(m_title)) Or _
           UCase(stripzeros(oldtag.artist)) <> UCase(stripzeros(m_artist)) Or _
           UCase(stripzeros(oldtag.album)) <> UCase(stripzeros(m_album)) Or _
           UCase(stripzeros(oldtag.year)) <> UCase(stripzeros(m_year)) Or _
           UCase(stripzeros(oldtag.comment)) <> UCase(stripzeros(m_comment)) _
            Or _
           oldtag.trackNumber <> m_trackNumber Or _
           oldtag.Genre <> m_genre Then
            ' Needs updating.
            retval = True
        End If
    End If
    
    ' Done.
    needsUpdate = retval
End Function

Public Function renameFile(style As String, _
Optional safestring As String = "", _
Optional physicalChange As Boolean = True) As String
    Dim newname As String, safeTitle As String, safeArtist As String
    Dim safeAlbum As String, safeYear As String, safeComment As String
    Dim mth As String, dy As String, yr As String, shortyear As String
    Dim hour24 As String, min As String, sec As String, sp As Integer
    Dim sp2 As Integer, safeGenre As String

    ' Make sure it isn't read-only.
    checkReadOnly "MP3Util::renameFile"
    
    ' Is there a filename?
    If filename = "" Then
        ' No.  Sob.
        Err.Raise MP3U_E_NOFILE, "MP3Util::renameFile", "There is no file " & _
                  "to rename"
    End If
    
    ' OK, now check the replace string to see if it contains any illegal
    ' characters.
    If isforbidden(safestring) Then
        Err.Raise MP3U_E_INVALIDCHARACTER, "MP3Util::renameFile", _
                  "The argument replace contains an illegal character"
    End If
    
    ' Everything seems to be in order.  Grab some "safe" values to substitute.
    safeTitle = makesafe(title, safestring)
    safeArtist = makesafe(artist, safestring)
    safeAlbum = makesafe(album, safestring)
    safeYear = makesafe(year, safestring)
    safeComment = makesafe(comment, safestring)
    safeGenre = makesafe(comment, genreDescription(CInt(m_genre)))
    
    ' Generate the date and time variables.
    sp = InStr(1, Date, "/")
    mth = String(2 - (sp - 1), "0") & left(Date, sp - 1)
    
    sp2 = InStr(sp + 1, Date, "/")
    dy = Mid(Date, sp + 1, sp2 - sp - 1)
    dy = String(2 - Len(dy), "0") & dy
    
    yr = Mid(Date, sp2 + 1)
    
    shortyear = Mid(yr, 3)
    
    hour24 = Trim(Str(Hour(Time)))
    hour24 = String(2 - Len(hour24), "0") & hour24
    
    min = Trim(Str(Minute(Time)))
    min = String(2 - Len(min), "0") & min
    
    sec = Trim(Str(Second(Time)))
    sec = String(2 - Len(sec), "0") & sec
    
    ' Time to generate the new filename.
    newname = style
    
    newname = Replace(newname, "*T", safeTitle)
    newname = Replace(newname, "*A", safeArtist)
    newname = Replace(newname, "*a", safeAlbum)
    newname = Replace(newname, "*Y", safeYear)
    newname = Replace(newname, "*C", safeComment)
    newname = Replace(newname, "*N", Trim(Str(m_trackNumber)))
    newname = Replace(newname, "*G", safeGenre)
    newname = Replace(newname, "*M", mth)
    newname = Replace(newname, "*D", dy)
    newname = Replace(newname, "*y", yr)
    newname = Replace(newname, "*S", shortyear)
    newname = Replace(newname, "*H", hour24)
    newname = Replace(newname, "*m", min)
    newname = Replace(newname, "*s", sec)
    
    newname = makesafe(newname, safestring)
    
    ' Done!  Rename and return.
    If physicalChange Then
        FileCopy filename, newname
        Kill filename
        filename = newname
    End If
    
    renameFile = newname
End Function

Public Function genreDescription(ByVal Genre As MP3U_GENRES) As String
    Select Case Genre
        Case 0: genreDescription = "Blues"
        Case 1: genreDescription = "Classic Rock"
        Case 2: genreDescription = "Country"
        Case 3: genreDescription = "Dance"
        Case 4: genreDescription = "Disco"
        Case 5: genreDescription = "Funk"
        Case 6: genreDescription = "Grunge"
        Case 7: genreDescription = "Hip-Hop"
        Case 8: genreDescription = "Jazz"
        Case 9: genreDescription = "Metal"
        Case 10: genreDescription = "New Age"
        Case 11: genreDescription = "Oldies"
        Case 12: genreDescription = "Other"
        Case 13: genreDescription = "Pop"
        Case 14: genreDescription = "R&B"
        Case 15: genreDescription = "Rap"
        Case 16: genreDescription = "Reggae"
        Case 17: genreDescription = "Rock"
        Case 18: genreDescription = "Techno"
        Case 19: genreDescription = "Industrial"
        Case 20: genreDescription = "Alternative"
        Case 21: genreDescription = "Ska"
        Case 22: genreDescription = "Death Metal"
        Case 23: genreDescription = "Pranks"
        Case 24: genreDescription = "Soundtrack"
        Case 25: genreDescription = "Euro-Techno"
        Case 26: genreDescription = "Ambient"
        Case 27: genreDescription = "Trip-Hop"
        Case 28: genreDescription = "Vocal"
        Case 29: genreDescription = "Jazz+Funk"
        Case 30: genreDescription = "Fusion"
        Case 31: genreDescription = "Trance"
        Case 32: genreDescription = "Classical"
        Case 33: genreDescription = "Instrumental"
        Case 34: genreDescription = "Acid"
        Case 35: genreDescription = "House"
        Case 36: genreDescription = "Game"
        Case 37: genreDescription = "Sound Clip"
        Case 38: genreDescription = "Gospel"
        Case 39: genreDescription = "Noise"
        Case 40: genreDescription = "AlternRock"
        Case 41: genreDescription = "Bass"
        Case 42: genreDescription = "Soul"
        Case 43: genreDescription = "Punk"
        Case 44: genreDescription = "Space"
        Case 45: genreDescription = "Meditative"
        Case 46: genreDescription = "Instrumental Pop"
        Case 47: genreDescription = "Instrumental Rock"
        Case 48: genreDescription = "Ethnic"
        Case 49: genreDescription = "Gothic"
        Case 50: genreDescription = "Darkwave"
        Case 51: genreDescription = "Techno-Industrial"
        Case 52: genreDescription = "Electronic"
        Case 53: genreDescription = "Pop-Folk"
        Case 54: genreDescription = "Eurodance"
        Case 55: genreDescription = "Dream"
        Case 56: genreDescription = "Southern Rock"
        Case 57: genreDescription = "Comedy"
        Case 58: genreDescription = "Cult"
        Case 59: genreDescription = "Gangsta"
        Case 60: genreDescription = "Top 40"
        Case 61: genreDescription = "Christian Rap"
        Case 62: genreDescription = "Pop/Funk"
        Case 63: genreDescription = "Jungle"
        Case 64: genreDescription = "Native American"
        Case 65: genreDescription = "Cabaret"
        Case 66: genreDescription = "New Wave"
        Case 67: genreDescription = "Psychadelic"
        Case 68: genreDescription = "Rave"
        Case 69: genreDescription = "Showtunes"
        Case 70: genreDescription = "Trailer"
        Case 71: genreDescription = "Lo-Fi"
        Case 72: genreDescription = "Tribal"
        Case 73: genreDescription = "Acid Punk"
        Case 74: genreDescription = "Acid Jazz"
        Case 75: genreDescription = "Polka"
        Case 76: genreDescription = "Retro"
        Case 77: genreDescription = "Musical"
        Case 78: genreDescription = "Rock & Roll"
        Case 79: genreDescription = "Hard Rock"
        Case 80: genreDescription = "Unknown"
        Case Else: genreDescription = ""
    End Select
End Function
 
Public Function genreCode(Genre As String) As MP3U_GENRES
    Select Case UCase(Genre)
        Case "BLUES": genreCode = MP3U_G_BLUES
        Case "CLASSIC ROCK": genreCode = MP3U_G_CLASSICROCK
        Case "COUNTRY": genreCode = MP3U_G_COUNTRY
        Case "DANCE": genreCode = MP3U_G_DANCE
        Case "DISCO": genreCode = MP3U_G_DISCO
        Case "FUNK": genreCode = MP3U_G_FUNK
        Case "GRUNGE": genreCode = MP3U_G_GRUNGE
        Case "HIP-HOP": genreCode = MP3U_G_HIPHOP
        Case "JAZZ": genreCode = MP3U_G_JAZZ
        Case "METAL": genreCode = MP3U_G_METAL
        Case "NEW AGE": genreCode = MP3U_G_NEWAGE
        Case "OLDIES": genreCode = MP3U_G_OLDIES
        Case "OTHER": genreCode = MP3U_G_OTHER
        Case "POP": genreCode = MP3U_G_POP
        Case "R&B": genreCode = MP3U_G_RANDB
        Case "RAP": genreCode = MP3U_G_RAP
        Case "REGGAE": genreCode = MP3U_G_REGGAE
        Case "ROCK": genreCode = MP3U_G_ROCK
        Case "TECHNO": genreCode = MP3U_G_TECHNO
        Case "INDUSTRIAL": genreCode = MP3U_G_INDUSTRIAL
        Case "ALTERNATIVE": genreCode = MP3U_G_ALTERNATIVE
        Case "SKA": genreCode = MP3U_G_SKA
        Case "DEATH METAL": genreCode = MP3U_G_DEATHMETAL
        Case "PRANKS": genreCode = MP3U_G_PRANKS
        Case "SOUNDTRACK": genreCode = MP3U_G_SOUNDTRACK
        Case "EURO-TECHNO": genreCode = MP3U_G_EUROTECHNO
        Case "AMBIENT": genreCode = MP3U_G_AMBIENT
        Case "TRIP-HOP": genreCode = MP3U_G_TRIPHOP
        Case "VOCAL": genreCode = MP3U_G_VOCAL
        Case "JAZZ+FUNK": genreCode = MP3U_G_JAZZFUNK
        Case "FUSION": genreCode = MP3U_G_FUSION
        Case "TRANCE": genreCode = MP3U_G_TRANCE
        Case "CLASSICAL": genreCode = MP3U_G_CLASSICAL
        Case "INSTRUMENTAL": genreCode = MP3U_G_INSTRUMENTAL
        Case "ACID": genreCode = MP3U_G_ACID
        Case "HOUSE": genreCode = MP3U_G_HOUSE
        Case "GAME": genreCode = MP3U_G_GAME
        Case "SOUND CLIP": genreCode = MP3U_G_SOUNDCLIP
        Case "GOSPEL": genreCode = MP3U_G_GOSPEL
        Case "NOISE": genreCode = MP3U_G_NOISE
        Case "ALTERNROCK": genreCode = MP3U_G_ALTERNROCK
        Case "BASS": genreCode = MP3U_G_BASS
        Case "SOUL": genreCode = MP3U_G_SOUL
        Case "PUNK": genreCode = MP3U_G_PUNK
        Case "SPACE": genreCode = MP3U_G_SPACE
        Case "MEDITATIVE": genreCode = MP3U_G_MEDITATIVE
        Case "INSTRUMENTAL POP": genreCode = MP3U_G_INSTRUMENTALPOP
        Case "INSTRUMENTAL ROCK": genreCode = MP3U_G_INSTRUMENTALROCK
        Case "ETHNIC": genreCode = MP3U_G_ETHNIC
        Case "GOTHIC": genreCode = MP3U_G_GOTHIC
        Case "DARKWAVE": genreCode = MP3U_G_DARKWAVE
        Case "TECHNO-INDUSTRIAL": genreCode = MP3U_G_TECHNOINDUSTRIAL
        Case "ELECTRONIC": genreCode = MP3U_G_ELECTRONIC
        Case "POP-FOLK": genreCode = MP3U_G_POPFOLK
        Case "EURODANCE": genreCode = MP3U_G_EURODANCE
        Case "DREAM": genreCode = MP3U_G_DREAM
        Case "SOUTHERN ROCK": genreCode = MP3U_G_SOUTHERNROCK
        Case "COMEDY": genreCode = MP3U_G_COMEDY
        Case "CULT": genreCode = MP3U_G_CULT
        Case "GANGSTA": genreCode = MP3U_G_GANGSTA
        Case "TOP 40": genreCode = MP3U_G_TOP40
        Case "CHRISTIAN RAP": genreCode = MP3U_G_CHRISTIANRAP
        Case "POP/FUNK": genreCode = MP3U_G_POPFUNK
        Case "JUNGLE": genreCode = MP3U_G_JUNGLE
        Case "NATIVE AMERICAN": genreCode = MP3U_G_NATIVEAMERICAN
        Case "CABARET": genreCode = MP3U_G_CABARET
        Case "NEW WAVE": genreCode = MP3U_G_NEWWAVE
        Case "PSYCHADELIC": genreCode = MP3U_G_PSYCHADELIC
        Case "RAVE": genreCode = MP3U_G_RAVE
        Case "SHOWTUNES": genreCode = MP3U_G_SHOWTUNES
        Case "TRAILER": genreCode = MP3U_G_TRAILER
        Case "LO-FI": genreCode = MP3U_G_LOFI
        Case "TRIBAL": genreCode = MP3U_G_TRIBAL
        Case "ACID PUNK": genreCode = MP3U_G_ACIDPUNK
        Case "ACID JAZZ": genreCode = MP3U_G_ACIDJAZZ
        Case "POLKA": genreCode = MP3U_G_POLKA
        Case "RETRO": genreCode = MP3U_G_RETRO
        Case "MUSICAL": genreCode = MP3U_G_MUSICAL
        Case "ROCK & ROLL": genreCode = MP3U_G_ROCKANDROLL
        Case "HARD ROCK": genreCode = MP3U_G_HARDROCK
        Case "UNKNOWN": genreCode = MP3U_G_UNKNOWN
        Case Else
            ' Invalid code.
            Err.Raise MP3U_E_INVALIDARG, "MP3Util::genreCode", _
                      "The genre " & Genre & " does not exist"
    End Select
End Function

' Private Helper Methods
' -----------------------------------------------------------------------------

' Reads an ID-3 record from the given file.  More specifically, it just dumps
' the data of the last 128 bytes of *any* file into an ID-3 UDT.
Private Function readrecord(filename As String) As MP3U_ID3TAG
    Dim filenum As Integer, filelength As Long
    Dim tagbytes(1 To MP3U_LEN_ID3TAG) As Byte, retval As MP3U_ID3TAG
    
    ' Make sure the file is at least 128 bytes long.  Of course, if an MP3
    ' file is anywhere near 128 bytes long, it's almost definetly not valid.
    ' But, for the sake of simplicity, we'll require 128 or more.
    filelength = FileLen(filename)
    
    If filelength < MP3U_LEN_ID3TAG Then
        ' Not a valid file.
        Err.Raise MP3U_E_INVALIDFILE, "MP3Util::readrecord", _
                  "The given file, " & filename & ", is not valid"
    Else
        ' Seems innocent enough.  Let's grab the last 128 bytes.
        filenum = FreeFile
        
        Open filename For Binary As filenum
            Get #filenum, filelength - MP3U_LEN_ID3TAG + 1, tagbytes
        Close filenum
        
        ' Copy the bytes to their appropriate locations in the return UDT.
        retval.sentinel = fixlength(RTrim(copystring(tagbytes, _
                          MP3U_POS_SENTINEL, MP3U_LEN_SENTINEL)), _
                          MP3U_LEN_SENTINEL)
        retval.title = fixlength(RTrim(copystring(tagbytes, MP3U_POS_TITLE, _
                       MP3U_LEN_TITLE)), MP3U_LEN_TITLE)
        retval.artist = fixlength(RTrim(copystring(tagbytes, MP3U_POS_ARTIST, _
                        MP3U_LEN_ARTIST)), MP3U_LEN_ARTIST)
        retval.album = fixlength(RTrim(copystring(tagbytes, MP3U_POS_ALBUM, _
                       MP3U_LEN_ALBUM)), MP3U_LEN_ALBUM)
        retval.year = fixlength(RTrim(copystring(tagbytes, MP3U_POS_YEAR, _
                      MP3U_LEN_YEAR)), MP3U_LEN_YEAR)
        retval.comment = fixlength(RTrim(copystring(tagbytes, _
                         MP3U_POS_COMMENT, MP3U_LEN_COMMENT)), _
                         MP3U_LEN_COMMENT)
        retval.trackNumber = tagbytes(MP3U_POS_TRACK)
        retval.Genre = tagbytes(MP3U_POS_GENRE)
        
        ' All done.
        readrecord = retval
    End If
End Function

' Writes an ID-3 record to the given file.  If create is true, the record will
' be appended to the file.
Private Sub writerecord(filename As String, tag As MP3U_ID3TAG, _
Optional create As Boolean = False)
    Dim filenum As Integer, filelength As Long, i As Integer
    Dim tagbytes(1 To MP3U_LEN_ID3TAG) As Byte
    
    ' Populate tagbytes.
    copydata MP3U_TAGSENTINEL, tagbytes, MP3U_POS_SENTINEL
    copydata title, tagbytes, MP3U_POS_TITLE
    copydata artist, tagbytes, MP3U_POS_ARTIST
    copydata album, tagbytes, MP3U_POS_ALBUM
    copydata year, tagbytes, MP3U_POS_YEAR
    copydata comment, tagbytes, MP3U_POS_COMMENT
    
    tagbytes(MP3U_POS_TRACK) = trackNumber
    tagbytes(MP3U_POS_GENRE) = m_genre      ' Use m_genre because we know it's
                                            ' a byte.
    
    ' If we're not creating the ID3 tag, then make sure the file is long enough
    ' to already have one.
    filelength = FileLen(filename)
    filenum = FreeFile
    
    If Not create And filelength < MP3U_LEN_ID3TAG Then
        ' Too short.
        Err.Raise MP3U_E_INVALIDFILE, "MP3Util::writerecord", _
                  "The given file, " & filename & ", is not valid"
    ElseIf create Then
        ' Add it to the file.
        Open filename For Binary As filenum
            Put #filenum, filelength + 1, tagbytes
        Close filenum
    Else
        ' Change it.
        Open filename For Binary As filenum
            Put #filenum, filelength - MP3U_LEN_ID3TAG + 1, tagbytes
        Close filenum
    End If
End Sub

' Copies characters sequentially from the source array, up to length characters
' or a string terminator (Chr(0)).
Private Function copystring(source() As Byte, from As Byte, length As Byte) _
As String
    Dim i As Byte, retval As String
    
    For i = from To from + length - 1
        If source(i) <> 0 Then
            retval = retval & Chr(source(i))
        Else
            ' String terminator.
            Exit For
        End If
    Next
    
    ' Done.
    copystring = retval
End Function

' Copies characters from the string to the array, beginning at the specified
' location.
Private Sub copydata(source As String, destination() As Byte, start As Byte)
    Dim i As Integer
    
    For i = start To start + Len(source) - 1
        If i > UBound(destination) Then Exit Sub
        
        destination(i) = Asc(Mid(source, i - start + 1, 1))
    Next
End Sub

' Adjusts the length of the string (using the given padding character) to be
' the desired value.
Private Function fixlength(source As String, size As Long, _
Optional pad As Byte = 0) As String
    If Len(source) >= size Then
        fixlength = left(source, size)
    Else
        fixlength = source & String(size - Len(source), Chr(pad))
    End If
End Function

' This sub will raise an error if m_readonly is True.  Set source to be the
' name of the subroutine checking the read-only status.
Private Sub checkReadOnly(source As String)
    If readonly Then Err.Raise MP3U_E_READONLY, source, "File is read-only"
End Sub

' This sub will remove all characters from a string following a string
' terminator (Chr(0)).
Private Function stripzeros(source As String) As String
    Dim i As Integer, retval As String, c As String
    
    For i = 1 To Len(source)
        c = Mid(source, i, 1)
        
        If c <> Chr(0) Then
            retval = retval & c
        Else
            ' Terminator
            Exit For
        End If
    Next
    
    ' Done.
    stripzeros = retval
End Function

' Determines whether the given string is "forbidden," that is, if it contains
' any illegal filename characters.
Private Function isforbidden(source As String) As Boolean
    Dim retval As Boolean, i As Integer
    
    For i = 1 To Len(source)
        If InStr(1, MP3U_FORBIDDENCHARS, Mid(source, i, 1)) Then
            ' Forbidden.  No need to check the rest of the string.
            retval = True
            Exit For
        End If
    Next
    
    ' Done.
    isforbidden = retval
End Function

' Substitutes any forbidden characters in the given string with the specified
' value in order to make it "safe."
Private Function makesafe(source As String, newstring As String) As String
    Dim i As Integer, c As String, retval As String
    
    retval = source
    
    For i = 1 To Len(MP3U_FORBIDDENCHARS)
        c = Mid(MP3U_FORBIDDENCHARS, i, 1)
        retval = Replace(retval, c, newstring)
    Next
    
    ' Done.
    makesafe = retval
End Function
